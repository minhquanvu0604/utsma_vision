# Cause a fatal error if the CMake version is less than specified
cmake_minimum_required(VERSION 3.0 FATAL_ERROR) 
project(model_inference)


### PARAMETER TO CHANGE ###
set(CMAKE_CXX_STANDARD 14) ## Compile as C++14 or C++11
if(NOT CMAKE_INSTALL_PREFIX)
  set(CMAKE_INSTALL_PREFIX "/absolute/path/to/segmentation-model/install" CACHE PATH "Installation Directory")
endif()




find_package(Torch REQUIRED)
find_package(OpenCV REQUIRED)

include_directories(
  ${OpenCV_INCLUDE_DIRS}
  ${TORCH_INCLUDE_DIRS}
  ${PROJECT_SOURCE_DIR}/include
)

add_library(${PROJECT_NAME} STATIC
  src/ModelInference.cpp
)

target_link_libraries(${PROJECT_NAME}
  ${OpenCV_LIBS}
  ${TORCH_LIBRARIES}
)

# Specify include directories for consumers
# PUBLIC: Indicates that these directories are required both for building the library 
# and for consumers who link against it.
target_include_directories(${PROJECT_NAME} PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  # After installation, consumers should look for headers in the include directory under the installation prefix
  $<INSTALL_INTERFACE:include> 
)

# Installation rules
install(TARGETS ${PROJECT_NAME}
  EXPORT ${PROJECT_NAME}Targets # Exports the target information for use in other projects via find_package()
  ARCHIVE DESTINATION lib # For static libraries (.a files), install them to the lib directory
  LIBRARY DESTINATION lib # For shared libraries (.so files)
  RUNTIME DESTINATION bin # For executables (if any)
)

install(DIRECTORY include/
  DESTINATION include
)

# Export the targets for use with find_package
export(EXPORT ${PROJECT_NAME}Targets
  FILE "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake"
  NAMESPACE ${PROJECT_NAME}::
)

# Generate and install a package configuration file
include(CMakePackageConfigHelpers) # Includes helper functions for creating package configuration files
write_basic_package_version_file( # Generates a version file for the package
  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake" # Output file
  VERSION 1.0
  COMPATIBILITY AnyNewerVersion
)

configure_package_config_file( # Generates a package configuration file
  "${CMAKE_CURRENT_SOURCE_DIR}/cmake/${PROJECT_NAME}Config.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
  INSTALL_DESTINATION lib/cmake/${PROJECT_NAME}
)

install(
  EXPORT ${PROJECT_NAME}Targets
  FILE ${PROJECT_NAME}Targets.cmake
  NAMESPACE ${PROJECT_NAME}::
  DESTINATION lib/cmake/${PROJECT_NAME}
)

install(
  FILES
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
  DESTINATION lib/cmake/${PROJECT_NAME}
)
